name: Docker Build Deploy
on:
  push:
    branches: [main]
  workflow_dispatch:
env:
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  PRODUCT_REPO_ALERTS: ${{secrets.PRODUCT_REPO_ALERTS}}
  PRODUCT_REPO_GATEWAY: ${{secrets.PRODUCT_REPO_GATEWAY}}
  PRODUCT_REPO_USERS: ${{secrets.PRODUCT_REPO_USERS}}
  PRODUCT_REPO_CATEGORIES: ${{secrets.PRODUCT_REPO_CATEGORIES}}
  PRODUCT_REPO_BUDGETS: ${{secrets.PRODUCT_REPO_BUDGETS}}
  PRODUCT_REPO_DEBTS: ${{secrets.PRODUCT_REPO_DEBTS}}
  PRODUCT_REPO_EVENTS: ${{secrets.PRODUCT_REPO_EVENTS}}
  PRODUCT_REPO_EXPENSES: ${{secrets.PRODUCT_REPO_EXPENSES}}
  PRODUCT_REPO_INCOMES: ${{secrets.PRODUCT_REPO_INCOMES}}
  PRODUCT_REPO_MEETINGS: ${{secrets.PRODUCT_REPO_MEETINGS}}
jobs:
  deploy-front:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Zip Folder
        run: |
          zip -r frontend.zip . -x ".git/*" ".github/*"  "backend/*"
      - name: Copy repository contents via scp
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.HOST_FRONT }}
          USERNAME: ${{ secrets.USERNAME_FRONT }}
          PORT: ${{ secrets.PORT_FRONT }}
          key : ${{ secrets.SSH_KEY }}
        with:
          source: "frontend.zip"
          target: "/root"
      - name: Unzip Folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_FRONT }}
          username: ${{ secrets.USERNAME_FRONT }}
          password: ${{ secrets.PASSWORD_FRONT }}
          port: ${{ secrets.PORT_FRONT }}
          script: |
            unzip -o /root/frontend.zip -d /root
            rm -rf /root/frontend.zip
            cd /root/frontend/frontend
            npm install
            npm run build
            docker build -t front .
            docker run -d -p 80:80 front
  create-image-users:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |      
          rm -rf backend/services/users/src/env.ts
          touch backend/services/users/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/users/src/env.ts
      - name: Build services docker image user
        run: | 
          docker build backend/services/users/ --file backend/services/users/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_USERS:latest"
      - name: Push services docker image user
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_USERS:latest"
  create-image-gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Build services docker image gateway
        run: | 
          docker build backend/services/gateway/ --file backend/services/gateway/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_GATEWAY:latest"
      - name: Push services docker image gateway
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_GATEWAY:latest"
  create-image-alerts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/alerts/src/env.ts
          touch backend/services/alerts/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/alerts/src/env.ts
      - name: Build services docker image alerts
        run: | 
          docker build backend/services/alerts/ --file backend/services/alerts/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_ALERTS:latest"
      - name: Push services docker image alerts
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_ALERTS:latest"
  create-image-categories:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/categories/src/env.ts
          touch backend/services/categories/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/categories/src/env.ts
      - name: Build services docker image categories
        run: | 
          docker build backend/services/categories/ --file backend/services/categories/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_CATEGORIES:latest"
      - name: Push services docker image categories
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_CATEGORIES:latest"
  create-image-budgets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/budgets/src/env.ts
          touch backend/services/budgets/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/budgets/src/env.ts
      - name: Build services docker image budgets
        run: | 
          docker build backend/services/budgets/ --file backend/services/budgets/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_BUDGETS:latest"
      - name: Push services docker image budgets
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_BUDGETS:latest"
  create-image-debts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/debts/src/env.ts
          touch backend/services/debts/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/debts/src/env.ts
      - name: Build services docker image debts
        run: | 
          docker build backend/services/debts/ --file backend/services/debts/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_DEBTS:latest"
      - name: Push services docker image
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_DEBTS:latest"
  create-image-events:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/events/src/env.ts
          touch backend/services/events/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/events/src/env.ts
      - name: Build services docker image events
        run: | 
          docker build backend/services/events/ --file backend/services/events/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_EVENTS:latest"
      - name: Push services docker image
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_EVENTS:latest"
  create-image-expenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/expenses/src/env.ts
          touch backend/services/expenses/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/expenses/src/env.ts
      - name: Build services docker image expenses
        run: | 
          docker build backend/services/expenses/ --file backend/services/expenses/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_EXPENSES:latest"
      - name: Push services docker image expenses
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_EXPENSES:latest"
  create-image-incomes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/incomes/src/env.ts
          touch backend/services/incomes/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/incomes/src/env.ts
      - name: Build services docker image incomes
        run: | 
          docker build backend/services/incomes/ --file backend/services/incomes/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_INCOMES:latest"
      - name: Push services docker image incomes
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_INCOMES:latest"
  create-image-meetings:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: rm and touch prod env
        run: |          
          rm -rf backend/services/meetings/src/env.ts
          touch backend/services/meetings/src/env.ts
          echo "${{secrets.ENV}}" >> backend/services/meetings/src/env.ts
      - name: Build services docker image
        run: | 
          docker build backend/services/meetings/ --file backend/services/meetings/Dockerfile -t "$DOCKER_USERNAME/$PRODUCT_REPO_MEETINGS:latest"
      - name: Push services docker image
        run: |
          docker push "$DOCKER_USERNAME/$PRODUCT_REPO_MEETINGS:latest"
  deployment:
    needs: [create-image-gateway, create-image-categories, create-image-budgets, create-image-debts, create-image-events, create-image-expenses, create-image-incomes, create-image-meetings, create-image-users,create-image-alerts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout repository
      - name: Connect to GKE
        uses: Swibi/connect-to-gke@v2.1
        with:
          GCP_SA_KEY: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GCP_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GKE_CLUSTER: ${{ secrets.CLUSTER_NAME }}
          GKE_LOCATION: ${{ secrets.ZONE_NAME }}
      - name: Deploy to GKE
        run: |
          kubectl apply -f backend/challenge.yaml

