/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import Grid from '@mui/material/Grid'
import {Box, Button, FormControl, FormHelperText, InputLabel, OutlinedInput} from "@mui/material";
import {Formik} from "formik";
import * as Yup from 'yup';
import AnimateButton from "../extended/AnimateButton";

/*
import CreateButton from 'ui-component/buttons/CreateButton';
*/


const Group10161 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  width: '100%',
  height: `571px`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
});

const TitleDescription = styled('div')({
  display: `flex`,
  position: `absolute`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  width: `485px`,
  left: `0px`,
  top: `0px`,
});

const CreerUnBudgetEveneme = styled('div')(() => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(67, 62, 91, 1)`,
  fontStyle: `normal`,
  fontWeight: `700`,
  fontSize: `40px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `72px`,
  textTransform: `none`,
  width: `727px`,
  margin: `0px`,
}));

const CreerUnBudgetPourUnB = styled('div')(() => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(58, 73, 99, 1)`,
  fontStyle: `normal`,
  fontWeight: `400`,
  fontSize: `18px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `29px`,
  textTransform: `none`,
  width: `552px`,
  margin: `16px 0px 0px 0px`,
}));

const Group199 = styled('div')({
  display: `flex`,
  position: `absolute`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `927px`,
  height: `422px`,
  left: `0px`,
  top: `149px`,
});

const AddBudgetEvenementiel = ({ ...others }) =>{
  const handleAddBudget=async (values) =>{
    console.log(values)
    const { name,date } = values
    console.log(name)
    console.log(date)
    console.log("envoyer")
  };
  return (
      <>
    <Group10161>
      <TitleDescription>
        <CreerUnBudgetEveneme>
          {`Creer un Budget Evenementiel`}
        </CreerUnBudgetEveneme>
        <CreerUnBudgetPourUnB>
          {`Creer un budget pour un but evenementiel`}
        </CreerUnBudgetPourUnB>
      </TitleDescription>
      <Group199>
        <Formik
          initialValues={{
            name:'',
            dateStart:'',
            dateEnd:'',
            amount:'',
            submit: null
          }}
          validationSchema={Yup.object().shape({
            name : Yup.string().max(255).required('Nom du budget evenementiel est requis'),
            dateStart : Yup.date().required('La date de debut est requise'),
            dateEnd : Yup.date().required('La date de fin est requise'),
            amount : Yup.number().min(0).required('Le montant est requis'),
          })}
          onSubmit={handleAddBudget}
        >
          {({ errors, handleBlur, handleChange,isSubmitting, handleSubmit, touched, values }) => (
            <form noValidate onSubmit={handleSubmit} {...others}>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <FormControl fullWidth error ={Boolean(touched.name && errors.name )}>
                    <InputLabel htmlFor="outlined-budget-evenementiel-name">
                      Nom du budget evenementiel
                    </InputLabel>
                    <OutlinedInput
                        id="outlined-budget-evenementiel-name"
                        type="text"
                        value={values.name}
                        name="name"
                        onBlur={handleBlur}
                        onChange={handleChange}
                    />
                    {touched.name && errors.name &&(
                        <FormHelperText error id="standard-weight-helper-text--name">
                          {errors.name}
                        </FormHelperText>
                      )}
                  </FormControl>
                </Grid>
                <Grid item xs={12}>
                  <p>Période : </p>
                </Grid>
                <Grid item xs={6}>
                  <FormControl fullWidth error ={Boolean(touched.dateStart && errors.dateStart )}>
                    <InputLabel htmlFor="outlined-budget-evenementiel-dateStart">
                      Du:
                    </InputLabel>
                    <OutlinedInput
                        id="outlined-budget-evenementiel-dateStart"
                        type="date"
                        value={values.dateStart}
                        name="dateStart"
                        onBlur={handleBlur}
                        onChange={handleChange}
                    />
                    {touched.dateStart && errors.dateStart &&(
                        <FormHelperText error id="standard-weight-helper-text--dateStart">
                          {errors.dateStart}
                        </FormHelperText>
                    )}
                  </FormControl>
                </Grid>
                <Grid item xs={6}>
                  <FormControl fullWidth error ={Boolean(touched.dateEnd && errors.dateEnd )}>
                    <InputLabel htmlFor="outlined-budget-evenementiel-dateEnd">
                      Au:
                    </InputLabel>
                    <OutlinedInput
                        id="outlined-budget-evenementiel-dateEnd"
                        type="date"
                        value={values.dateEnd}
                        name="dateEnd"
                        onBlur={handleBlur}
                        onChange={handleChange}
                    />
                    {touched.dateEnd && errors.dateEnd &&(
                        <FormHelperText error id="standard-weight-helper-text--date">
                          {errors.dateEnd}
                        </FormHelperText>
                    )}
                  </FormControl>
                </Grid>
                <Grid item xs={12}>
                  <FormControl fullWidth error ={Boolean(touched.amount && errors.amount )}>
                    <InputLabel htmlFor="outlined-budget-evenementiel-amount">
                      Montant Total du budget
                    </InputLabel>
                    <OutlinedInput
                        id="outlined-budget-evenementiel-amount"
                        type="number"
                        value={values.amount}
                        name="amount"
                        onBlur={handleBlur}
                        onChange={handleChange}
                    />
                    {touched.amount && errors.amount &&(
                        <FormHelperText error id="standard-weight-helper-text--amount">
                          {errors.amount}
                        </FormHelperText>
                    )}
                  </FormControl>
                </Grid>
                {errors.submit && (
                    <Box sx={{ mt: 3 }}>
                      <FormHelperText error>{errors.submit}</FormHelperText>
                    </Box>
                )}

                <Box sx={{ mt: 2,ml:2 }}>
                  <AnimateButton>
                    <Button disableElevation disabled={isSubmitting} fullWidth size="large" type="submit" variant="contained" color="secondary">
                      Créer
                    </Button>
                  </AnimateButton>
                </Box>
              </Grid>
            </form>
          )}
      </Formik>
      </Group199>
    </Group10161>
      </>
  );
};

export default AddBudgetEvenementiel;
